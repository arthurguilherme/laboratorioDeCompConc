/* Disciplina: Computacao Concorrente */
/* Prof.: Silvana Rossetto */
/* Laboratório: 4 */
/* Codigo: Uso de variáveis de condição e suas operações básicas para sincronização por condição */

/*****
 *
 * Programa com 4 threads
 * A thread 1 imprime a frase “tudo bem?”
 * A thread 2 imprime a frase “bom dia!”
 * A thread 3 imprime a frase “ate mais!”
 * A thread 4 imprime a frase “boa tarde!”
 * As threads 1 e 2 devem executar antes das threads 3 e 4 sempre
 * A ordem de execucao entre as threads 1 e 2 nao importa, assim como a ordem de execucao entre as threads 3 e 4
 *
 *   ****/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NTHREADS  4

/* Variaveis globais */
int x = 0;
pthread_mutex_t x_mutex;
pthread_cond_t x_cond;

// Thread 1 imprime "tudo bem?" deve ser executada antes de 3 e 4
void* Thread1(void *t) {

	int boba1, boba2;

	/* faz alguma coisa pra gastar tempo... */
	boba1 = 10000;
	boba2 = -10000;
	while (boba2 < boba1)
		boba2++;
	
	printf("tudo bem?\n");

	pthread_mutex_lock(&x_mutex);
	x++;
	if (x == 2) {
		pthread_cond_broadcast(&x_cond);
	}
	pthread_mutex_unlock(&x_mutex);

	pthread_exit(NULL);
}

// Thread 2 imprime "bom dia!" deve ser executada antes de 3 e 4
void* Thread2(void *t) {

	int boba1, boba2;

	/* faz alguma coisa pra gastar tempo... */
	boba1 = 10000;
	boba2 = -10000;
	while (boba2 < boba1)
		boba2++;
	
	printf("bom dia!\n");

	pthread_mutex_lock(&x_mutex);
	x++;
	if (x == 2) {
		pthread_cond_broadcast(&x_cond);
	}
	pthread_mutex_unlock(&x_mutex);

	pthread_exit(NULL);
}

// Thread 3 imprime "ate mais!" deve ser executada depois de 1 e 2
void* Thread3(void *t) {
	
	pthread_mutex_lock(&x_mutex);
	if (x < 2) {
		pthread_cond_wait(&x_cond, &x_mutex);
	}
	printf("ate mais!\n");
	pthread_mutex_unlock(&x_mutex);
	pthread_exit(NULL);
}

// Thread 4 imprime "boa tarde!" deve ser executada depois de 1 e 2
void* Thread4(void *t) {

	pthread_mutex_lock(&x_mutex);
	if (x < 2) {
		pthread_cond_wait(&x_cond, &x_mutex);
	}
	printf("boa tarde!\n");
	pthread_mutex_unlock(&x_mutex);
	pthread_exit(NULL);
}

/* Funcao principal */
int main(int argc, char *argv[]) {
	int i;
	pthread_t threads[NTHREADS];

	/* Inicilaiza o mutex (lock de exclusao mutua) e a variavel de condicao */
	pthread_mutex_init(&x_mutex, NULL);
	pthread_cond_init(&x_cond, NULL);

	/* Cria as threads */
	pthread_create(&threads[0], NULL, Thread3, NULL);
	pthread_create(&threads[1], NULL, Thread4, NULL);
	pthread_create(&threads[2], NULL, Thread1, NULL);
	pthread_create(&threads[3], NULL, Thread2, NULL);

	/* Espera todas as threads completarem */
	for (i = 0; i < NTHREADS; i++) {
		pthread_join(threads[i], NULL);
	}

	/* Desaloca variaveis e termina */
	pthread_mutex_destroy(&x_mutex);
	pthread_cond_destroy(&x_cond);
}
